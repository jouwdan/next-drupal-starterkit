<?php

/**
 * @file
 * Main module file for wunder_next.
 */

use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\simple_oauth\Entities\AccessTokenEntity;
use Drupal\user\Entity\User;

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function wunder_next_next_site_load($entities) {
  // We want to override the configuration entity for the next site
  // to set the frontend path based on our setting.
  // The setting is then set according to an environment variable in
  // settings.php.
  $settings = Settings::get('wunder_next.settings');
  // We expect one next site called "frontend", which we have added
  // to the initial recipe.
  foreach ($entities as $next_site) {
    if ($next_site->id() == 'frontend') {
      $next_site->setBaseUrl($settings['frontend_url']);
      $next_site->setPreviewUrl($settings['frontend_url'] . '/api/preview');
      $next_site->setRevalidateUrl($settings['frontend_url'] . '/api/revalidate');
      $next_site->setRevalidateSecret($settings['revalidate_secret']);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function wunder_next_consumer_load($entities) {
  // We want to be able to vary the secret of the consumer
  // entity based on our environment variable.
  // Get the settings for the module, that are set to
  // the corresponding environment variables in settings.php:
  $settings = Settings::get('wunder_next.settings');

  // The secret is set on the consumer entity as a
  // password field, so we get the password service
  // in order to hash it:
  /** @var \Drupal\Core\Password\PhpassHashedPassword $password_service */
  $password_service = \Drupal::service('password');

  /** @var \Drupal\consumers\Entity\ConsumerInterface $consumer */
  foreach ($entities as $consumer) {
    // Identify the consumer with the right client id.
    if ($consumer->getClientId() == $settings['client_id']) {
      // We set the consumer secret "on the fly" to the hashed
      // value of our setting, which is turn is determined
      // by the environment variable.
      $consumer->set('secret', $password_service->hash($settings['client_secret']));
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function wunder_next_entity_type_alter(array &$entity_types) {
  // Add our custom validation constraint that makes sure
  // that there is only one frontpage node per translation:
  $entity_types['node']->addConstraint('UniqueFrontpage');
}

/**
 * Implements hook_ckeditor5_plugin_info_alter().
 */
function wunder_next_ckeditor5_plugin_info_alter(array &$plugin_definitions): void {
  // The frontend expects images with pixel dimensions, so we have to alter the
  // image resize plugin configuration to set it to pixels instead of
  // percentages  More info at:
  // https://ckeditor.com/docs/ckeditor5/latest/api/module_image_image-ImageConfig.html#member-resizeUnit
  if ($plugin_definitions['ckeditor5_imageResize'] instanceof CKEditor5PluginDefinition) {
    $image_resize_plugin_definition = $plugin_definitions['ckeditor5_imageResize']->toArray();
    $image_resize_plugin_definition["ckeditor5"]["config"]["image"]["resizeUnit"] = "px";
    $plugin_definitions['ckeditor5_imageResize'] = new CKEditor5PluginDefinition($image_resize_plugin_definition);
  };
}

/**
 * Implements hook_simple_oauth_private_claims_alter().
 */
function wunder_next_simple_oauth_private_claims_alter(&$private_claims, AccessTokenEntity $access_token_entity) {
  // Get the user id:
  $user_id = $access_token_entity->getUserIdentifier();
  $user = User::load($user_id);

  // Add the email and the username to the claims.
  $private_claims = [
    'id' => $user->id(),
    'email' => $user->getEmail(),
    'username' => $user->getAccountName(),
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wunder_next_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $account = Drupal::currentUser();
  if ($account->hasRole('frontend_login')) {
    // Do not allow the user to change the email address.
    $form["account"]["mail"]["#access"] = FALSE;
    // Add textual explanation:
    $form["#prefix"] = t("Welcome, set your password below:");
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'wunder_next_form_user_edited_form_submit';
      }
    }
  }
}

/**
 * Additional form submit function for the user form.
 *
 * This function will redirect the user to the frontend login page after they
 * have updated their password.
 */
function wunder_next_form_user_edited_form_submit(array $form, FormStateInterface $form_state) {
  // We don't want the user to keep being logged into Drupal after this
  // operation goes through, because they will be taken to the frontend anyway:
  user_logout();
  $settings = Settings::get('wunder_next.settings');
  $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();
  // We will pass two query parameters to the login page in the frontend:
  $query = [
    // This parameter is then picked up in the frontend to show
    // a confirmation message:
    'passwordJustUpdated' => 'true',
    // This parameter will redirect the user to their dashboard after login:
    'callbackUrl' => '/' . $current_language . '/dashboard',
  ];
  $frontend_login_url = Url::fromUri($settings['frontend_url'] . '/' . $current_language . '/auth/login', ['query' => $query]);
  // Redirect to the frontend login url:
  $response = new TrustedRedirectResponse($frontend_login_url->toString());
  $form_state->setResponse($response);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wunder_next_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  // We add our own submit function that will redirect the user to
  // the frontend after they asked for a new password:
  $form['#submit'][] = 'wunder_next_form_user_reset_password_form_submit';
}

/**
 * Additional form submit function for the user reset password form.
 *
 * This function will redirect the user to the frontend login page after they
 * have requested a new password.
 */
function wunder_next_form_user_reset_password_form_submit(array $form, FormStateInterface $form_state) {
  $settings = Settings::get('wunder_next.settings');
  $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();
  // We will pass two query parameters to the login page in the frontend:
  $query = [
    // This parameter is then picked up in the frontend to show
    // a confirmation message:
    'newPasswordRequested' => 'true',
    // Add the requested email, so we can display it in the frontend:
    'enteredEmail' => $form_state->getValue('name'),
  ];
  $frontend_login_url = Url::fromUri($settings['frontend_url'] . '/' . $current_language . '/auth/login', ['query' => $query]);
  // Redirect to the frontend login url:
  $response = new TrustedRedirectResponse($frontend_login_url->toString());
  $form_state->setResponse($response);
}
